Set<Integer> difference = new HashSet<Integer>(otherOption.getPossibilities(mainCategoryIndex));

otherOption.getPossibilities(mainCategoryIndex).retainAll(includedPossibilities);
if (otherOption.getPossibilities(mainCategoryIndex).size() == 0) 
	throw new LogicException("Shit");
	
difference.removeAll(otherOption.getPossibilities(mainCategoryIndex));

if (!difference.isEmpty()) {
	System.out.println("Relation deleting option: " + difference + " from category: " + mainCategoryIndex + " in option at " + r.getCategoryIndex(!otherIsLesser) + " " + r.getOptionIndex(!otherIsLesser) + " based on " + this);
	lp.printBoard();
	for (int opt = 0; opt < lp.getOptionNum(); opt++) {
		if (difference.contains(opt))
			try {
				lp.getOption(mainCategoryIndex, opt).declareMiss(otherOption);
			} catch (LogicException e) {
				if (e.getCategory2Index() == -1)
					e.addOption(mainCategoryIndex, opt);
				throw e;
			}
	}
	
	inferLinks();
	otherOption.pushRelations(mainCategoryIndex);
}


Set<Integer> difference = new HashSet<Integer>(possibleLinks.get(i));

possibleLinks.get(i).retainAll(newPossibilities);
if (possibleLinks.get(i).size() == 0) 
	throw new LogicException("Shit");
	
difference.removeAll(possibleLinks.get(i));

if(!difference.isEmpty()) {
	System.out.println("Condensing deleting option: " + difference + " from category: " + i + " in option from " + this + " based on ");
	for (Option o : condensers) System.out.println(o);
	lp.printBoard();
	
	for (int opt = 0; opt < lp.getOptionNum(); opt++) {
		if (difference.contains(opt)) {
			try {
				lp.getOption(i, opt).declareMiss(this);
			} catch (LogicException e) {
				if (e.getCategory2Index() == -1)
					e.addOption(i, opt);
				throw e;
			}
		}
	}
	inferLinks();
	checkRestrictions(i, difference);
	pushRelations(i);
}